{"version":3,"sources":["components/Header/Header.js","components/Button/Button.js","containers/Main/Menu/Menu.js","containers/Main/Menu/textInputValidation.js","components/MatrixVisual/CellVisual/CellVisual.js","components/MatrixVisual/MatrixVisual.js","containers/Main/MatrixPage/createMatrix.js","containers/Main/findIslands.js","containers/Main/MatrixPage/MatrixPage.js","containers/Main/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Button","props","onClick","children","Menu","useState","textInput","setTextInput","inputError","setInputError","menuClick","value","text","includes","test","numbers","split","length","parseInt","n","m","textInputValidation","splitedInput","buttonClickHandler","instructions","type","placeholder","onChange","event","target","CellVisual","size","style","full","drawable","color","backgroundColor","cellClickHandler","MatrixVisual","matrixBody","colors","numberOfCells","Math","max","matrix","rowIndex","row","colIndex","cellVisualProps","floor","random","push","createMatrix","empty","r","c","markEntireIsland","rootX","rootY","islandNum","queue","cell","shift","x","y","i","j","inRowBounds","inColumnBounds","MatrixPage","setMatrix","solved","setSolved","useEffect","drawableHandler","content","prevMatrix","newMatrix","newRow","solvedContent","solution","inputMatrix","islands","col","islandsNum","findIslands","console","log","Fragment","restartClickHandler","Main","page","setPage","setN","setM","newPage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.313365b9.chunk.js","sourcesContent":["import './Header.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"App-header\">\r\n            <span className=\"attenti\">\r\n                <span className=\"attenti-first-letter\">a</span>\r\n                ttenti\r\n            </span>\r\n            exercise\r\n      </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import './Button.css';\r\n\r\nconst Button = props => {\r\n    return (\r\n        <div className=\"button\">\r\n            <button onClick={props.onClick}>{props.children}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Button;","import './Menu.css';\r\nimport React, {useState} from 'react';\r\nimport Button from '../../../components/Button/Button';\r\nimport {textInputValidation} from './textInputValidation';\r\n\r\nconst Menu = props => {\r\n\r\n    const [textInput, setTextInput] = useState(\"\");\r\n    const [inputError, setInputError] = useState(false);\r\n\r\n    // Checks input validity and performs the button action\r\n    const menuClick = value => {\r\n        if(!textInputValidation(textInput)){\r\n            setInputError(true);\r\n            return;\r\n        }\r\n        \r\n        const splitedInput = textInput.split(\", \");\r\n\r\n        const n = parseInt(splitedInput[0]);\r\n        const m = parseInt(splitedInput[1]);\r\n        props.buttonClickHandler(n, m, value);\r\n    }\r\n\r\n    let instructions = <p>Please enter bitmap size:</p>\r\n\r\n    if(inputError)\r\n        instructions = <p className=\"error\">* Input has to be in \"n, m\" format. n and m between 1 to 1,000.</p>\r\n\r\n    const content = (\r\n        <div>\r\n            {instructions}\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Bitmap size: n, m\" \r\n                value={textInput}\r\n                onChange={event => setTextInput(event.target.value)}\r\n            />\r\n            <Button onClick={() => menuClick('randomize')}>RANDOMIZE</Button>\r\n            <Button onClick={() => menuClick('draw')}>BONUS: DRAW</Button>\r\n        </div>\r\n    );\r\n\r\n    return content;\r\n}\r\n\r\nexport default Menu;","// validates \"n, m\" pattern and valid range\r\n\r\nexport const textInputValidation = text => {\r\n    if(text == null)\r\n        return false;\r\n\r\n    if(!text.includes(\", \") && !/^[0-9, ]*$/.test(text))\r\n        return false;\r\n    \r\n    const numbers = text.split(\", \");\r\n\r\n    if(numbers.length !== 2)\r\n        return false;\r\n\r\n    if(!/^[0-9]*$/.test(numbers[0]) || !/^[0-9]*$/.test(numbers[1]))\r\n        return false;\r\n\r\n    const [n, m] = [parseInt(numbers[0]), parseInt(numbers[1])]\r\n\r\n    if(n < 1 || n > 1000 || m < 1 || m > 1000)\r\n        return false;\r\n\r\n    return true;\r\n}","import \"./CellVisual.css\";\r\n\r\nconst CellVisual = props => {\r\n\r\n    let className = \"cell \" + props.size;\r\n    let style = {};\r\n\r\n    if(props.full)\r\n        className += \" full\";\r\n\r\n    if(props.drawable)\r\n        className += \" drawable\";\r\n\r\n    if(props.color){\r\n        style = {backgroundColor: \"rgb(\" + props.color[0] + \", \"+ props.color[1] + \", \" + props.color[2] + \")\"};\r\n    }\r\n    return <div className={className} style={style} onClick={props.cellClickHandler}></div>;\r\n}\r\n\r\nexport default CellVisual;","import './MatrixVisual.css';\r\nimport CellVisual from './CellVisual/CellVisual';\r\n\r\nconst MatrixVisual = props => {\r\n    \r\n    const matrixBody = [];\r\n    const colors = {};\r\n\r\n    // set cells size depending on the larger between row or col number\r\n    const numberOfCells = Math.max(props.matrix.length, props.matrix[0].length)\r\n    \r\n    let size = 'large';\r\n\r\n    if (numberOfCells > 170){\r\n        size = 'small';\r\n    } else if (numberOfCells > 100){\r\n        size = 'medium-small';\r\n    } else if(numberOfCells > 70){\r\n        size = 'medium';\r\n    } else if(numberOfCells > 50){\r\n        size = 'medium-large';\r\n    }\r\n\r\n    // create cells with correct style\r\n    for (let rowIndex = 0; rowIndex < props.matrix.length; rowIndex++){\r\n        const row = [];\r\n\r\n        for(let colIndex = 0; colIndex < props.matrix[0].length; colIndex++){\r\n            \r\n            // style of simple \"false\" cell\r\n            const cellVisualProps = {\"size\": size};\r\n\r\n            // add onClick option to drawable cell\r\n            if(props.drawable){\r\n                cellVisualProps[\"drawable\"] = true;\r\n                cellVisualProps[\"cellClickHandler\"] = (() => props.drawable(rowIndex, colIndex));\r\n            }\r\n\r\n            // add default color to \"true\" cell\r\n            if(props.matrix[rowIndex][colIndex] === true) \r\n                cellVisualProps[\"full\"] = true;\r\n            \r\n            // add color if cell belongs to an island\r\n            if(!([true, false].includes(props.matrix[rowIndex][colIndex]))) {\r\n                \r\n                // if first cell of the island, create a random color\r\n                if(!(props.matrix[rowIndex][colIndex] in colors)){\r\n                    const color = [\r\n                        Math.floor(Math.random() * 150) + 50,\r\n                        Math.floor(Math.random() * 150) + 50,\r\n                        Math.floor(Math.random() * 150) + 50\r\n                    ];\r\n                    colors[props.matrix[rowIndex][colIndex]] = color;\r\n                }\r\n\r\n                cellVisualProps[\"color\"] = colors[props.matrix[rowIndex][colIndex]];\r\n            }\r\n            \r\n            row.push(<td key={`${rowIndex}  ${colIndex}`}><CellVisual {...cellVisualProps}/></td>);\r\n        }\r\n        \r\n        matrixBody.push(<tr key={rowIndex}>{row}</tr>);\r\n    }\r\n\r\n    return (\r\n        <table className=\"table\">\r\n            <tbody>\r\n                {matrixBody}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default MatrixVisual;","export const createMatrix = (n, m, empty) => {\r\n    \r\n    if(n < 1 || m < 1)\r\n        return null;\r\n\r\n    const P = 0.5 // probability for a non-empty cell\r\n\r\n    const matrix = [];\r\n\r\n    for(let r = 0; r < n; r++){\r\n        const row = [];\r\n        for(let c = 0; c < m; c++){\r\n            if (empty)\r\n                row.push(false);\r\n            else\r\n                row.push(Math.random() < P);\r\n        }\r\n        matrix.push(row);\r\n    }\r\n\r\n    return matrix;\r\n}","// \"true\" cells will change to their island number during visit\r\n\r\n// with BFS algorithm\r\nconst markEntireIsland  = (rootX, rootY, matrix, islandNum) => {\r\n    const queue = [];\r\n\r\n    // marked as queued with -1 value\r\n    matrix[rootX][rootY] = -1;\r\n    queue.push([rootX, rootY]);\r\n\r\n    while(queue.length !== 0){\r\n        const cell = queue.shift();\r\n        \r\n        const x = cell[0];\r\n        const y = cell[1];\r\n\r\n        // visit this cell\r\n        matrix[x][y] = islandNum;\r\n        \r\n        // add unvisited neighbours\r\n        for(let i = -1; i <= 1; i++){\r\n            for(let j = -1; j <= 1; j++){\r\n                const inRowBounds = (x + i >= 0 && x + i < matrix.length);\r\n                const inColumnBounds = (y + j >= 0 && y + j < matrix[0].length);\r\n\r\n                if(inRowBounds && inColumnBounds){\r\n                    if(matrix[x + i][y + j] === true){\r\n                        matrix[x + i][y + j] = -1;\r\n                        queue.push([x + i, y + j]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const findIslands = inputMatrix => {\r\n    let islands = 0;\r\n\r\n    // deep copy to new matrix\r\n    const matrix = [];\r\n    for (let i = 0; i < inputMatrix.length; i++)\r\n        matrix[i] = [...inputMatrix[i]];\r\n\r\n    for(let row = 0; row < matrix.length; row++){\r\n        for(let col = 0; col < matrix[0].length; col++){\r\n            if(matrix[row][col] === true){\r\n                islands++;\r\n                markEntireIsland(row, col, matrix, islands);\r\n            }\r\n        }\r\n    }\r\n\r\n    return ({islandsNum: islands, matrix: matrix});\r\n}","import React, {useState, useEffect} from \"react\";\r\nimport MatrixVisual from \"../../../components/MatrixVisual/MatrixVisual\";\r\nimport {createMatrix} from './createMatrix'; \r\nimport Button from \"../../../components/Button/Button\";\r\n\r\nimport {findIslands} from \"../findIslands\";\r\n\r\nconst MatrixPage = props => {\r\n    \r\n    const [matrix, setMatrix] = useState(null);\r\n    const [solved, setSolved] = useState(false);\r\n\r\n    // create empty or random matrix\r\n    useEffect(() => {\r\n        if (props.type === \"randomize\")\r\n            setMatrix(createMatrix(props.n, props.m, false));\r\n        if (props.type === \"draw\")\r\n            setMatrix(createMatrix(props.n, props.m, true));\r\n    }, [props.n, props.m, props.type]);\r\n\r\n    const solveHandler = () => {\r\n        const solution = findIslands(matrix);\r\n        console.log(solution);\r\n\r\n        setSolved(solution.islandsNum);\r\n        setMatrix(solution.matrix);\r\n    }\r\n\r\n    //  handle cell clicks in draw mode by toggling true/false\r\n    let drawableHandler;\r\n\r\n    if(props.type === \"draw\")   {\r\n        drawableHandler = (x, y) => {\r\n            setMatrix(prevMatrix => {\r\n                const newMatrix = [...prevMatrix];\r\n                const newRow = [...newMatrix[x]];\r\n                newRow[y] = !newRow[y];\r\n                newMatrix[x] = newRow;\r\n                return newMatrix;\r\n            });\r\n        }\r\n    }\r\n\r\n    let content;\r\n    let solvedContent = <Button onClick={solveHandler}>SOLVE</Button>;\r\n\r\n    if(solved !== false) {\r\n        solvedContent = (\r\n            <React.Fragment>\r\n                <p>Found {solved} Islands!</p>\r\n                <Button onClick={props.restartClickHandler}>RESTART</Button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    if(matrix){\r\n        content = (\r\n            <React.Fragment>\r\n                <MatrixVisual matrix={matrix} drawable={drawableHandler}/>\r\n                {solvedContent}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MatrixPage;","import \"./Main.css\";\r\nimport React, {useState} from 'react';\r\nimport Menu from './Menu/Menu';\r\nimport MatrixPage from \"./MatrixPage/MatrixPage\";\r\n\r\nconst Main = () => {\r\n    \r\n    const [page, setPage] = useState('menu'); // page = {'menu', 'randomize', 'draw'}\r\n    const [n, setN] = useState();\r\n    const [m, setM] = useState();\r\n\r\n    const buttonClickHandler = (n, m, newPage) => {\r\n        setN(n);\r\n        setM(m);\r\n        setPage(newPage);\r\n    }\r\n\r\n    let content;\r\n\r\n    switch (page){\r\n        case 'menu':\r\n            content = <Menu buttonClickHandler={buttonClickHandler}/>;\r\n            break;\r\n        case 'randomize':\r\n            content = <MatrixPage n={n} m={m} type=\"randomize\" restartClickHandler={() => setPage('menu')}/>;\r\n            break;\r\n        case 'draw':\r\n            content = <MatrixPage n={n} m={m} type=\"draw\" restartClickHandler={() => setPage('menu')}/>;\r\n            break;\r\n        default:\r\n            console.log(\"No page case was detected\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;","import './App.css';\nimport Header from './components/Header/Header';\nimport Main from './containers/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"name-and-date\">\n        26/07/21 - Yariv Shenkar\n      </div>\n\n      <Header/>\n      <Main/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}