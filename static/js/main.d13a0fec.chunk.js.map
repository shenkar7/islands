{"version":3,"sources":["components/Button/Button.js","containers/Main/Menu/Menu.js","containers/Main/Menu/textInputValidation.js","components/MatrixVisual/CellVisual/CellVisual.js","components/MatrixVisual/MatrixVisual.js","containers/Main/MatrixPage/createMatrix.js","containers/Main/MatrixPage/MatrixPage.js","containers/Main/findIslands.js","containers/Main/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","className","onClick","children","Menu","useState","textInput","setTextInput","inputError","setInputError","menuClick","value","text","includes","test","numbers","split","length","parseInt","n","m","textInputValidation","buttonClickHandler","instructions","type","placeholder","onChange","event","target","CellVisual","size","style","full","drawable","color","backgroundColor","cellClickHandler","MatrixVisual","matrixBody","colors","MAX","Math","max","matrix","r","row","c","cellVisualProps","floor","random","push","createMatrix","empty","MatrixPage","setMatrix","solved","setSolved","useEffect","drawableHandler","content","x","y","prevMatrix","newMatrix","newRow","solvedContent","islands","bfs","rootX","rootY","queue","cell","shift","i","j","inRowBounds","inColumnBounds","findIslands","Fragment","restartClickHandler","Main","page","setPage","setN","setM","newPage","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d13a0fec.chunk.js","sourcesContent":["import './Button.css';\r\n\r\nconst Button = props => {\r\n    return (\r\n        <div className=\"button\">\r\n            <button onClick={props.onClick}>{props.children}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Button;","import './Menu.css';\r\nimport React, {useState} from 'react';\r\nimport Button from '../../../components/Button/Button';\r\nimport {textInputValidation} from './textInputValidation';\r\n\r\nconst Menu = props => {\r\n\r\n    const [textInput, setTextInput] = useState(\"\");\r\n    const [inputError, setInputError] = useState(false);\r\n\r\n    // Checks input validity and performs the button action\r\n    const menuClick = value => {\r\n        if(!textInputValidation(textInput)){\r\n            setInputError(true);\r\n            return;\r\n        }\r\n        \r\n        const n = parseInt(textInput.split(\", \")[0]);\r\n        const m = parseInt(textInput.split(\", \")[1]);\r\n        props.buttonClickHandler(n, m, value);\r\n    }\r\n\r\n    let instructions = <p>Please enter bitmap size:</p>\r\n\r\n    if(inputError)\r\n        instructions = <p className=\"error\">* Input has to be in \"n, m\" format. n and m between 1 to 1,000.</p>\r\n\r\n    const content = (\r\n        <div>\r\n            {instructions}\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Bitmap size: n, m\" \r\n                value={textInput}\r\n                onChange={event => setTextInput(event.target.value)}\r\n            />\r\n            <Button onClick={() => menuClick('randomize')}>RANDOMIZE</Button>\r\n            <Button onClick={() => menuClick('draw')}>BONUS: DRAW</Button>\r\n        </div>\r\n    );\r\n\r\n    return content;\r\n}\r\n\r\nexport default Menu;","// validates \"n, m\" pattern and valid range\r\n\r\nexport const textInputValidation = text => {\r\n    if(text == null)\r\n        return false;\r\n\r\n    if(!text.includes(\", \") && !/^[0-9, ]*$/.test(text))\r\n        return false;\r\n    \r\n    const numbers = text.split(\", \");\r\n\r\n    if(numbers.length !== 2)\r\n        return false;\r\n\r\n    if(!/^[0-9]*$/.test(numbers[0]) || !/^[0-9]*$/.test(numbers[1]))\r\n        return false;\r\n\r\n    const [n, m] = [parseInt(numbers[0]), parseInt(numbers[1])]\r\n\r\n    if(n < 1 || n > 1000 || m < 1 || m > 1000)\r\n        return false;\r\n\r\n    return true;\r\n}","import \"./CellVisual.css\";\r\n\r\nconst CellVisual = props => {\r\n\r\n    let className = \"cell \" + props.size;\r\n    let style = {};\r\n\r\n    if(props.full)\r\n        className += \" full\";\r\n\r\n    if(props.drawable)\r\n        className += \" drawable\";\r\n\r\n    if(props.color){\r\n        style = {backgroundColor: \"rgb(\" + props.color[0] + \", \"+ props.color[1] + \", \" + props.color[2] + \")\"};\r\n    }\r\n    return <div className={className} style={style} onClick={props.cellClickHandler}></div>;\r\n}\r\n\r\nexport default CellVisual;","import './MatrixVisual.css';\r\nimport CellVisual from './CellVisual/CellVisual';\r\n\r\nconst MatrixVisual = props => {\r\n    \r\n    const matrixBody = [];\r\n    const colors = {};\r\n\r\n    // set cells size depending on the larger between row or col number\r\n    const MAX = Math.max(props.matrix.length, props.matrix[0].length)\r\n    \r\n    let size = 'large';\r\n\r\n    if(MAX > 50)\r\n        size = 'medium-large';\r\n\r\n    if(MAX > 70)\r\n        size = 'medium';\r\n\r\n    if(MAX > 100)\r\n        size = 'medium-small';\r\n\r\n    if(MAX > 170)\r\n        size = 'small';\r\n\r\n    // create cells with correct style\r\n    for (let r = 0; r < props.matrix.length; r++){\r\n        const row = [];\r\n\r\n        for(let c = 0; c < props.matrix[0].length; c++){\r\n            \r\n            // style of simple \"false\" cell\r\n            const cellVisualProps = {\"size\": size};\r\n\r\n            // add onClick option to drawable cell\r\n            if(props.drawable){\r\n                cellVisualProps[\"drawable\"] = true;\r\n                cellVisualProps[\"cellClickHandler\"] = (() => props.drawable(r, c));\r\n            }\r\n\r\n            // add default color to \"true\" cell\r\n            if(props.matrix[r][c] === true) \r\n                cellVisualProps[\"full\"] = true;\r\n            \r\n            // add color if cell belongs to an island\r\n            if(!([true, false].includes(props.matrix[r][c]))) {\r\n                \r\n                // if first cell of the island, create a random color\r\n                if(!(props.matrix[r][c] in colors)){\r\n                    const color = [\r\n                        Math.floor(Math.random() * 150) + 50,\r\n                        Math.floor(Math.random() * 150) + 50,\r\n                        Math.floor(Math.random() * 150) + 50\r\n                    ];\r\n                    colors[props.matrix[r][c]] = color;\r\n                }\r\n\r\n                cellVisualProps[\"color\"] = colors[props.matrix[r][c]];\r\n            }\r\n            \r\n            row.push(<td key={r + \"\" + c}><CellVisual {...cellVisualProps}/></td>);\r\n        }\r\n        \r\n        matrixBody.push(<tr key={r}>{row}</tr>);\r\n    }\r\n\r\n    return (\r\n        <table className=\"table\">\r\n            <tbody>\r\n                {matrixBody}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default MatrixVisual;","export const createMatrix = (n, m, empty) => {\r\n    \r\n    if(n < 1 || m < 1)\r\n        return null;\r\n\r\n    const P = 0.5 // probability for a non-empty cell\r\n\r\n    const matrix = [];\r\n\r\n    for(let r = 0; r < n; r++){\r\n        const row = [];\r\n        for(let c = 0; c < m; c++){\r\n            if (empty)\r\n                row.push(false);\r\n            else\r\n                row.push(Math.random() < P);\r\n        }\r\n        matrix.push(row);\r\n    }\r\n\r\n    return matrix;\r\n}","import React, {useState, useEffect} from \"react\";\r\nimport MatrixVisual from \"../../../components/MatrixVisual/MatrixVisual\";\r\nimport {createMatrix} from './createMatrix'; \r\nimport Button from \"../../../components/Button/Button\";\r\n\r\nimport {findIslands} from \"../findIslands\";\r\n\r\nconst MatrixPage = props => {\r\n    \r\n    const [matrix, setMatrix] = useState(null);\r\n    const [solved, setSolved] = useState(false);\r\n\r\n    // create empty or random matrix\r\n    useEffect(() => {\r\n        if (props.type === \"randomize\")\r\n            setMatrix(createMatrix(props.n, props.m, false));\r\n        if (props.type === \"draw\")\r\n            setMatrix(createMatrix(props.n, props.m, true));\r\n    }, [props.n, props.m, props.type]);\r\n\r\n    const solveHandler = () => {\r\n        setSolved(findIslands(matrix));\r\n    }\r\n\r\n    //  handle cell clicks in draw mode by toggling true/false\r\n    let drawableHandler;\r\n\r\n    if(props.type === \"draw\")   {\r\n        drawableHandler = (x, y) => {\r\n            setMatrix(prevMatrix => {\r\n                const newMatrix = [...prevMatrix];\r\n                const newRow = [...newMatrix[x]];\r\n                newRow[y] = !newRow[y];\r\n                newMatrix[x] = newRow;\r\n                return newMatrix;\r\n            });\r\n        }\r\n    }\r\n\r\n    let content;\r\n    let solvedContent = <Button onClick={solveHandler}>SOLVE</Button>;\r\n\r\n    if(solved !== false) {\r\n        solvedContent = (\r\n            <React.Fragment>\r\n                <p>Found {solved} Islands!</p>\r\n                <Button onClick={props.restartClickHandler}>RESTART</Button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    if(matrix){\r\n        content = (\r\n            <React.Fragment>\r\n                <MatrixVisual matrix={matrix} drawable={drawableHandler}/>\r\n                {solvedContent}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MatrixPage;","// \"true\" cells will change to their island number during visit\r\n\r\nexport const findIslands = matrix => {\r\n    let islands = 0;\r\n\r\n    const bfs = (rootX, rootY) => {\r\n        islands++;\r\n        const queue = [];\r\n\r\n        // marked as queued with -1 value\r\n        matrix[rootX][rootY] = -1;\r\n        queue.push([rootX, rootY]);\r\n\r\n        while(queue.length !== 0){\r\n            const cell = queue.shift();\r\n            \r\n            const x = cell[0];\r\n            const y = cell[1];\r\n\r\n            // visit this cell\r\n            matrix[x][y] = islands;\r\n            \r\n            // add unvisited neighbours\r\n            for(let i = -1; i <= 1; i++){\r\n                for(let j = -1; j <= 1; j++){\r\n                    const inRowBounds = (x + i >= 0 && x + i < matrix.length);\r\n                    const inColumnBounds = (y + j >= 0 && y + j < matrix[0].length);\r\n\r\n                    if(inRowBounds && inColumnBounds){\r\n                        if(matrix[x + i][y + j] === true){\r\n                            matrix[x + i][y + j] = -1;\r\n                            queue.push([x + i, y + j]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for(let r = 0; r < matrix.length; r++){\r\n        for(let c = 0; c < matrix[0].length; c++){\r\n            if(matrix[r][c] === true)\r\n                bfs(r, c);\r\n        }\r\n    }\r\n\r\n    return islands;\r\n}","import \"./Main.css\";\r\nimport React, {useState} from 'react';\r\nimport Menu from './Menu/Menu';\r\nimport MatrixPage from \"./MatrixPage/MatrixPage\";\r\n\r\nconst Main = () => {\r\n    \r\n    const [page, setPage] = useState('menu'); // page = {'menu', 'randomize', 'draw'}\r\n    const [n, setN] = useState();\r\n    const [m, setM] = useState();\r\n\r\n    const buttonClickHandler = (n, m, newPage) => {\r\n        setN(n);\r\n        setM(m);\r\n        setPage(newPage);\r\n    }\r\n\r\n    let content;\r\n\r\n    switch (page){\r\n        case 'menu':\r\n            content = <Menu buttonClickHandler={buttonClickHandler}/>;\r\n            break;\r\n        case 'randomize':\r\n            content = <MatrixPage n={n} m={m} type=\"randomize\" restartClickHandler={() => setPage('menu')}/>;\r\n            break;\r\n        case 'draw':\r\n            content = <MatrixPage n={n} m={m} type=\"draw\" restartClickHandler={() => setPage('menu')}/>;\r\n            break;\r\n        default:\r\n            console.log(\"No page case was detected\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;","import './App.css';\nimport Main from './containers/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"name-and-date\">\n        26/07/21 - Yariv Shenkar\n      </div>\n\n      <header className=\"App-header\">\n        <span className=\"attenti\">\n          <span className=\"attenti-first-letter\">a</span>\n          ttenti\n        </span>\n        exercise\n      </header>\n\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}