{"version":3,"sources":["components/Header/Header.js","components/Button/Button.js","containers/Main/Menu/Menu.js","containers/Main/Menu/textInputValidation.js","components/MatrixVisual/functions.js","components/MatrixVisual/MatrixVisual.js","components/MatrixVisual/drawTable.js","containers/Main/MatrixPage/createMatrix.js","containers/Main/findIslands.js","containers/Main/MatrixPage/MatrixPage.js","containers/Main/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Button","props","onClick","children","Menu","useState","textInput","setTextInput","inputError","setInputError","menuClick","value","text","includes","test","numbers","split","length","parseInt","n","m","textInputValidation","splitedInput","buttonClickHandler","instructions","type","placeholder","onChange","event","target","getMatrixProperties","matrix","numberOfCells","Math","max","cellSize","getIslandColor","islandsColors","cell","floor","random","MatrixVisual","eventListenerAdded","setEventListenerAdded","slice","canvasWidth","canvasHeight","canvasRef","useRef","useEffect","canvas","current","context","getContext","cellClickHandler","addEventListener","rect","getBoundingClientRect","x","y","round","getCellRowColFromCanvasXY","clientX","left","clientY","top","cellRow","cellCol","ctx","fillStyle","fillRect","rowIndex","colIndex","r","g","b","drawTable","ref","width","height","createMatrix","empty","row","c","push","markEntireIsland","rootX","rootY","islandNum","queue","shift","i","j","inRowBounds","inColumnBounds","MatrixPage","setMatrix","solved","setSolved","content","prevMatrix","newMatrix","newRow","solvedContent","solution","inputMatrix","islands","col","islandsNum","findIslands","Fragment","restartClickHandler","Main","page","setPage","setN","setM","newPage","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d22e0f0.chunk.js","sourcesContent":["import './Header.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"App-header\">\r\n            <span className=\"attenti\">\r\n                <span className=\"attenti-first-letter\">a</span>\r\n                ttenti\r\n            </span>\r\n            exercise\r\n      </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import './Button.css';\r\n\r\nconst Button = props => {\r\n    return (\r\n        <div className=\"button\">\r\n            <button onClick={props.onClick}>{props.children}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Button;","import './Menu.css';\r\nimport React, {useState} from 'react';\r\nimport Button from '../../../components/Button/Button';\r\nimport {textInputValidation} from './textInputValidation';\r\n\r\nconst Menu = props => {\r\n\r\n    const [textInput, setTextInput] = useState(\"\");\r\n    const [inputError, setInputError] = useState(false);\r\n\r\n    // Checks input validity and performs the button action\r\n    const menuClick = value => {\r\n        if(!textInputValidation(textInput)){\r\n            setInputError(true);\r\n            return;\r\n        }\r\n        \r\n        const splitedInput = textInput.split(\", \");\r\n\r\n        const n = parseInt(splitedInput[0]);\r\n        const m = parseInt(splitedInput[1]);\r\n        props.buttonClickHandler(n, m, value);\r\n    }\r\n\r\n    let instructions = <p>Please enter bitmap size:</p>\r\n\r\n    if(inputError)\r\n        instructions = <p className=\"error\">* Input has to be in \"n, m\" format. n and m between 1 to 1,000.</p>\r\n\r\n    const content = (\r\n        <div>\r\n            {instructions}\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Bitmap size: n, m\" \r\n                value={textInput}\r\n                onChange={event => setTextInput(event.target.value)}\r\n            />\r\n            <Button onClick={() => menuClick('randomize')}>RANDOMIZE</Button>\r\n            <Button onClick={() => menuClick('draw')}>BONUS: DRAW</Button>\r\n        </div>\r\n    );\r\n\r\n    return content;\r\n}\r\n\r\nexport default Menu;","// validates \"n, m\" pattern and valid range\r\n\r\nexport const textInputValidation = text => {\r\n    if(text == null)\r\n        return false;\r\n\r\n    if(!text.includes(\", \") && !/^[0-9, ]*$/.test(text))\r\n        return false;\r\n    \r\n    const numbers = text.split(\", \");\r\n\r\n    if(numbers.length !== 2)\r\n        return false;\r\n\r\n    if(!/^[0-9]*$/.test(numbers[0]) || !/^[0-9]*$/.test(numbers[1]))\r\n        return false;\r\n\r\n    const [n, m] = [parseInt(numbers[0]), parseInt(numbers[1])]\r\n\r\n    if(n < 1 || n > 1000 || m < 1 || m > 1000)\r\n        return false;\r\n\r\n    return true;\r\n}","export const getMatrixProperties = matrix => {\r\n    const m = matrix.length\r\n    const n = matrix[0].length\r\n    \r\n    const numberOfCells = Math.max(n, m);\r\n\r\n    // large - 15 , medium-large - 10 , medium - 7 , medium-small - 4 , small - 2\r\n    let cellSize = 15;\r\n\r\n    // returns cells size depending on the larger between row or col number\r\n    if (numberOfCells > 100){\r\n        cellSize = 4;\r\n    } else if(numberOfCells > 70){\r\n        cellSize = 7;\r\n    } else if(numberOfCells > 50){\r\n        cellSize = 10;\r\n    }\r\n\r\n    const canvasWidth = m * cellSize + m + 1;\r\n    const canvasHeight = n * cellSize + n + 1;\r\n\r\n    return [n, m, cellSize, canvasWidth, canvasHeight];\r\n}\r\n\r\n\r\nexport const getIslandColor = (islandsColors, cell) => {\r\n    // if first cell of the island, create a random color\r\n    if(!(cell in islandsColors)){\r\n        islandsColors[cell] = [\r\n            Math.floor(Math.random() * 150) + 50,\r\n            Math.floor(Math.random() * 150) + 50,\r\n            Math.floor(Math.random() * 150) + 50\r\n        ];\r\n    }\r\n\r\n    return islandsColors[cell];\r\n}\r\n\r\n\r\nexport const getCellRowColFromCanvasXY = (x, y, cellSize) => {\r\n    const row = Math.floor((Math.round(y) - 1) / (cellSize + 1));\r\n    const col = Math.floor((Math.round(x) - 1) / (cellSize + 1));\r\n\r\n    return [row, col];\r\n}","import React, {useEffect, useRef, useState} from 'react';\r\nimport {getMatrixProperties, getCellRowColFromCanvasXY} from './functions';\r\nimport {drawTable} from './drawTable';\r\n\r\nconst MatrixVisual = props => {\r\n\r\n    const [eventListenerAdded, setEventListenerAdded] = useState(false);\r\n\r\n    const [cellSize, canvasWidth, canvasHeight] = getMatrixProperties(props.matrix).slice(-3);;\r\n    \r\n    const canvasRef = useRef(null);\r\n\r\n    // on each matrix update by click, draw the table again\r\n    useEffect(() => {\r\n\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n\r\n        // in draw mode, add only once a click event listener to the canvas\r\n        if (props.cellClickHandler && !eventListenerAdded) {\r\n            setEventListenerAdded(true);\r\n            canvas.addEventListener('click', event => {\r\n                const rect = canvas.getBoundingClientRect();\r\n                const x = event.clientX - rect.left;\r\n                const y = event.clientY - rect.top;\r\n\r\n                const [cellRow, cellCol] = getCellRowColFromCanvasXY(x, y, cellSize);\r\n                props.cellClickHandler(cellRow, cellCol);\r\n            });\r\n        }\r\n\r\n        drawTable(context, props.matrix);\r\n\r\n    }, [cellSize, props, eventListenerAdded])\r\n\r\n    return <canvas ref={canvasRef} width={canvasWidth} height={canvasHeight}/>\r\n}\r\n\r\nexport default MatrixVisual;","import {getIslandColor, getMatrixProperties} from './functions';\r\n\r\nexport const drawTable = (ctx, matrix) => {\r\n        \r\n    const [n, m, cellSize, canvasWidth, canvasHeight] = getMatrixProperties(matrix);\r\n\r\n    // background fill behind the rectangles will look like a grid\r\n    ctx.fillStyle = '#a7a7a7';\r\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\r\n    let x = 1;\r\n    let y = 1;\r\n\r\n    const islandsColors = {};\r\n\r\n    // draw cells with correct style\r\n    for (let rowIndex = 0; rowIndex < m; rowIndex++){\r\n        for(let colIndex = 0; colIndex < n; colIndex++){\r\n            const cell = matrix[rowIndex][colIndex]\r\n            \r\n            if (cell === true) {\r\n                ctx.fillStyle = 'gray';\r\n                ctx.fillRect(x, y, cellSize, cellSize);\r\n            }\r\n            else if (cell === false) {\r\n                ctx.fillStyle = 'white';\r\n                ctx.fillRect(x, y, cellSize, cellSize);\r\n            }\r\n            else {\r\n                // draw a colored cell as part of an island\r\n                const [r, g, b] = getIslandColor(islandsColors, cell);\r\n                ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;\r\n                ctx.fillRect(x, y, cellSize, cellSize);\r\n            }\r\n\r\n            x += cellSize + 1;\r\n        }\r\n\r\n        y += cellSize + 1;\r\n        x = 1\r\n    }\r\n\r\n}","export const createMatrix = (n, m, empty) => {\r\n    \r\n    if(n < 1 || m < 1)\r\n        return null;\r\n\r\n    const P = 0.5 // probability for a non-empty cell\r\n\r\n    const matrix = [];\r\n\r\n    for(let r = 0; r < n; r++){\r\n        const row = [];\r\n        for(let c = 0; c < m; c++){\r\n            if (empty)\r\n                row.push(false);\r\n            else\r\n                row.push(Math.random() < P);\r\n        }\r\n        matrix.push(row);\r\n    }\r\n\r\n    return matrix;\r\n}","// \"true\" cells will change to their island number during visit\r\n\r\n// with BFS algorithm\r\nconst markEntireIsland  = (rootX, rootY, matrix, islandNum) => {\r\n    const queue = [];\r\n\r\n    // marked as queued with -1 value\r\n    matrix[rootX][rootY] = -1;\r\n    queue.push([rootX, rootY]);\r\n\r\n    while(queue.length !== 0){\r\n        const cell = queue.shift();\r\n        \r\n        const x = cell[0];\r\n        const y = cell[1];\r\n\r\n        // visit this cell\r\n        matrix[x][y] = islandNum;\r\n        \r\n        // add unvisited neighbours\r\n        for(let i = -1; i <= 1; i++){\r\n            for(let j = -1; j <= 1; j++){\r\n                const inRowBounds = (x + i >= 0 && x + i < matrix.length);\r\n                const inColumnBounds = (y + j >= 0 && y + j < matrix[0].length);\r\n\r\n                if(inRowBounds && inColumnBounds){\r\n                    if(matrix[x + i][y + j] === true){\r\n                        matrix[x + i][y + j] = -1;\r\n                        queue.push([x + i, y + j]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const findIslands = inputMatrix => {\r\n    let islands = 0;\r\n\r\n    // deep copy to new matrix\r\n    const matrix = [];\r\n    for (let i = 0; i < inputMatrix.length; i++)\r\n        matrix[i] = [...inputMatrix[i]];\r\n\r\n    for(let row = 0; row < matrix.length; row++){\r\n        for(let col = 0; col < matrix[0].length; col++){\r\n            if(matrix[row][col] === true){\r\n                islands++;\r\n                markEntireIsland(row, col, matrix, islands);\r\n            }\r\n        }\r\n    }\r\n\r\n    return ({islandsNum: islands, matrix: matrix});\r\n}","import React, {useState, useEffect} from \"react\";\r\nimport MatrixVisual from \"../../../components/MatrixVisual/MatrixVisual\";\r\nimport {createMatrix} from './createMatrix'; \r\nimport Button from \"../../../components/Button/Button\";\r\n\r\nimport {findIslands} from \"../findIslands\";\r\n\r\nconst MatrixPage = props => {\r\n    \r\n    const [matrix, setMatrix] = useState(null);\r\n    const [solved, setSolved] = useState(false);\r\n\r\n    // create empty or random matrix\r\n    useEffect(() => {\r\n        if (props.type === \"randomize\")\r\n            setMatrix(createMatrix(props.n, props.m, false));\r\n        if (props.type === \"draw\")\r\n            setMatrix(createMatrix(props.n, props.m, true));\r\n    }, [props.n, props.m, props.type]);\r\n\r\n    const solveHandler = () => {\r\n        const solution = findIslands(matrix);\r\n\r\n        setSolved(solution.islandsNum);\r\n        setMatrix(solution.matrix);\r\n    }\r\n\r\n    //  handle cell clicks in draw mode by toggling true/false\r\n    let cellClickHandler;\r\n\r\n    if(props.type === \"draw\")   {\r\n        cellClickHandler = (r, c) => {\r\n            setMatrix(prevMatrix => {\r\n                const newMatrix = [...prevMatrix];\r\n                const newRow = [...newMatrix[r]];\r\n                newRow[c] = !newRow[c];\r\n                newMatrix[r] = newRow;\r\n                return newMatrix;\r\n            });\r\n        }\r\n    }\r\n\r\n    let content;\r\n    let solvedContent = <Button onClick={solveHandler}>SOLVE</Button>;\r\n\r\n    if(solved !== false) {\r\n        solvedContent = (\r\n            <React.Fragment>\r\n                <p>Found {solved} Islands!</p>\r\n                <Button onClick={props.restartClickHandler}>RESTART</Button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    if(matrix){\r\n        content = (\r\n            <React.Fragment>\r\n                <MatrixVisual matrix={matrix} cellClickHandler={cellClickHandler}/>\r\n                {solvedContent}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MatrixPage;","import \"./Main.css\";\r\nimport React, {useState} from 'react';\r\nimport Menu from './Menu/Menu';\r\nimport MatrixPage from \"./MatrixPage/MatrixPage\";\r\n\r\nconst Main = () => {\r\n    \r\n    const [page, setPage] = useState('menu'); // page = {'menu', 'randomize', 'draw'}\r\n    const [n, setN] = useState();\r\n    const [m, setM] = useState();\r\n\r\n    const buttonClickHandler = (n, m, newPage) => {\r\n        setN(n);\r\n        setM(m);\r\n        setPage(newPage);\r\n    }\r\n\r\n    let content;\r\n\r\n    switch (page){\r\n        case 'menu':\r\n            content = <Menu buttonClickHandler={buttonClickHandler}/>;\r\n            break;\r\n        case 'randomize':\r\n            content = <MatrixPage n={n} m={m} type=\"randomize\" restartClickHandler={() => setPage('menu')}/>;\r\n            break;\r\n        case 'draw':\r\n            content = <MatrixPage n={n} m={m} type=\"draw\" restartClickHandler={() => setPage('menu')}/>;\r\n            break;\r\n        default:\r\n            console.log(\"No page case was detected\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;","import './App.css';\nimport Header from './components/Header/Header';\nimport Main from './containers/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"name-and-date\">\n        26/07/21 - Yariv Shenkar\n      </div>\n\n      <Header/>\n      <Main/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}